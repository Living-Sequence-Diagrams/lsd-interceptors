plugins {
    id 'java-library'
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.palantir.git-version' version '0.12.3'
}

apply from: 'hooks.gradle'

repositories {
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = '11'

group = 'io.github.lsd-consulting'
version = gitVersion().replaceAll("^v", "")
logger.lifecycle("Version:$version")

ext {
    junitJupiter = '5.6.0'
    junitPlatformVersion = '1.3.2'
}

wrapper {
    gradleVersion = "7.0.2"
}

allprojects {
    plugins.withId('java') {
        dependencies {
            implementation 'io.github.lsd-consulting:lsd-core:5.2.2'
            implementation 'io.github.lsd-consulting:lsd-formatting-library:1.0.8'

            implementation 'org.projectlombok:lombok:1.18.22'
            
            testCompileOnly 'org.projectlombok:lombok:1.18.22'
            testImplementation 'org.assertj:assertj-core:3.15.0'
            testImplementation 'org.mockito:mockito-junit-jupiter:3.3.3'
            testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiter"
            testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiter"
            testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitJupiter"
            
            annotationProcessor 'org.projectlombok:lombok:1.18.22'
            testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
        }
    }
}
subprojects {
    plugins.withId('java-library') {

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        apply plugin: 'maven-publish'
        publishing {
            publications {
                "$project.name"(MavenPublication) {
                    groupId = 'io.github.lsd-consulting'
                    artifactId project.name
                    version = "${gitVersion().replaceAll("^v", "")}"

                    from components.java
                    artifact sourcesJar
                    artifact javadocJar

                    pom {
                        name = "lsd-interceptors"
                        description = "Provides various interceptors to capture events for the lsd-core library to generate sequence diagrams"
                        url = 'https://github.com/lsd-consulting/lsd-interceptors.git'
                        licenses {
                            license {
                                name = "MIT License"
                                url = "https://github.com/lsd-consulting/lsd-interceptors/blob/main/LICENSE.txt"
                                distribution = "repo"
                            }
                        }
                        developers {
                            developer {
                                name = "Nick"
                                email = "nicholas.mcdowall@gmail.com"
                                organization = 'NKM IT Solutions Ltd'
                                organizationUrl = 'https://github.com/nickmcdowall'
                            }
                            developer {
                                name = "Lukasz"
                                email = "lukasz.gryzbon@gmail.com"
                                organization = 'Integreety Ltd.'
                                organizationUrl = 'https://github.com/integreety'
                            }
                        }
                        scm {
                            url = "https://github.com/lsd-consulting/lsd-interceptors.git"
                        }
                    }
                    repositories {
                        maven {
                            name = 'sonatype'
                            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                            credentials(PasswordCredentials)
                        }
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    if (project.findProperty("signingKey")) {
        // Use in-memory ascii-armored keys
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    } else {
        // Use signing properties in ~/.gradle/gradle.properties
        sign publishing.publications
    }
}
